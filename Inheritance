Suppose, we want to write a class ‘RateJungle’ in which visitor can provide ‘rating’ based on their visiting-experience. 
If we write the class from the starting, then we need define attribute ‘visitorName’ again; which will make the code repetitive and unorganizable, 
as the visitor entry will be at multiple places and such code is more prone to error. With the help of inheritance, we can avoid such duplication as shown in Listing 14.5; 
where class Jungle is inherited at Line 33 by the class ‘RateJungle’. 
Now, when the object ‘r’ of class ‘RateJungle’ is created at Line 62 of Listing 14.5, then this object ‘r’ will have the access to ‘visitorName’ as well 
(which is in the parent class).

// InheritanceEx.cpp

#include <iostream>
using namespace std;

class Jungle{
private: // not accessible outside the class
    string visitorName;

public:  // to allow access to function 'welcomeMessage' outside the class
    
    // constructor : automatically called at the time of object-creation
    Jungle(string name){
        setVisitorName(name);
    }

    // setVisitorName is accessible outside the class, which will set the visitor name
    void setVisitorName(string name){
        visitorName = name;
    }

    // function to retrieve the visitorName as it is not accessible directly
    string getVisitorName(){
        return visitorName;
    }

    void welcomeMessage(){
        cout << "Welcome to Jungle " << getVisitorName();
    }
};


class RateJungle : public Jungle{
private: 
    int feedback;
    string name;
public:
    // constructor 1
    RateJungle(string name) : Jungle(name){
        feedback = 0;  // set feedback to zero by default
    }

    // constructor 2
    RateJungle(string name, int value) : Jungle(name){
        feedback = value;  // set feedback to zero by default
    }

    void setFeedback(int value){
        feedback = value;
    }

    void printRating(){
        cout << "Thanks " << getVisitorName() << endl;
        cout << "Your feedback is set as : " << feedback << endl;
    }
};


int main(){
    string name;

    RateJungle r("pranit");   // constructor 1 will be initialized
    RateJungle s("shantanu", 3);   // constructor 2 will be initialized

    // Feedback is set to 0 by constructor
    r.printRating();  // print the feedback value 
    
    r.setFeedback(2); // provide feedback value
    r.printRating();  // print the feedback value

    s.printRating();  // print the feedback value

    return 0;
}

/* Outputs
thanks pranit 
Your feedback is set as : 0

Thanks pranit
Your feedback is set as : 2

Thanks shantanu
Your feedback is set as : 3

*/

an empty constructor is added at Line 54, for setting the value of the object ‘p’ (Line 74) through Line 83. Note that,
since we added empty constructor in child class, therefore we need to add in parent class as well as shown in Line 18.

// InheritanceEx2.cpp

#include <iostream>
using namespace std;

class Jungle{
private: // not accessible outside the class
    string visitorName;

public:  // to allow access to function 'welcomeMessage' outside the class
    
    // constructor : automatically called at the time of object-creation
    Jungle(string name){
        setVisitorName(name);
    }

    // empty constructor
    Jungle(){ // it is required as child-class is using empty constructor

    }

    // setVisitorName is accessible outside the class, which will set the visitor name
    void setVisitorName(string name){
        visitorName = name;
    }

    // function to retrieve the visitorName as it is not accessible directly
    string getVisitorName(){
        return visitorName;
    }

    void welcomeMessage(){
        cout << "Welcome to Jungle " << getVisitorName();
    }
};


class RateJungle : public Jungle{
private: 
    int feedback;
    string name;
public:
    // constructor 1
    RateJungle(string name) : Jungle(name){
        feedback = 0;  // set feedback to zero by default
    }

    // constructor 2
    RateJungle(string name, int value) : Jungle(name){
        feedback = value;  // set feedback to zero by default
    }

    // constructor 3 : empty constructor
    RateJungle(){  // empty constructor in parent class is compulsory

    }

    void setFeedback(int value){
        feedback = value;
    }

    void printRating(){
        cout << "Thanks " << getVisitorName() << endl;
        cout << "Your feedback is set as : " << feedback << endl;
    }
};


int main(){
    string name;

    RateJungle r("pranit");   // constructor 1 will be initialized
    RateJungle s("shantanu", 3);   // constructor 2 will be initialized
    RateJungle p;

    // Feedback is set to 0 by constructor
    r.printRating();  // print the feedback value     
    r.setFeedback(2); // provide feedback value
    r.printRating();  // print the feedback value

    s.printRating();  // print the feedback value

    p.setVisitorName("kharat");  // constructor 3 is used 
    p.setFeedback(5);
    p.printRating();

    return 0;
}

/* Outputs
Thanks pranit
Your feedback is set as : 0
Thanks pranit
Your feedback is set as : 2

Thanks shantanu
Your feedback is set as : 3

Thanks kharat
Your feedback is set as : 5
*/
